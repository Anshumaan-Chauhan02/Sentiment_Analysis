# -*- coding: utf-8 -*-
"""SemanticAnalysisFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BnL6Ki48-EnhGuR37Do_6NhtIBndIWcH
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import os
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import classification_report


os.environ['KAGGLE_CONFIG_DIR'] = "/content/drive/MyDrive/Kaggle"
# %cd /content/drive/MyDrive/Kaggle
!kaggle datasets download -d kazanova/sentiment140

!unzip "/content/drive/MyDrive/Kaggle/sentiment140.zip"

#Storing the dataset in dataframe
m_cols=['target','ids','date','flag','user','text']
df=pd.read_csv('/content/drive/MyDrive/Kaggle/training.1600000.processed.noemoticon.csv',names=m_cols,encoding='latin-1')

df.head()

#Downloading appropriate github code 
!pip install git+https://github.com/laxmimerit/preprocess_kgptalkie.git 

df['target'].value_counts()
df.describe()
df[800000:].describe()

train_reviews=df.iloc[:10000,5:]
train_reviews=train_reviews.append(df.iloc[800000:810000,5:])
test_reviews=df.iloc[10000:11000,5:]
test_reviews=test_reviews.append(df.iloc[810000:820000,5:])
train_sentiments=df.iloc[:10000,0:1]
train_sentiments=train_sentiments.append(df.iloc[800000:810000,0:1])
test_sentiments=df.iloc[10000:11000,0:1]
test_sentiments=test_sentiments.append(df.iloc[810000:820000,0:1])
print(train_reviews.shape,train_sentiments.shape)
print(test_reviews.shape,test_sentiments.shape)

train_reviews.head()


import preprocess_kgptalkie as ps
import re 
def get_clean(x):
    x = str(x).lower().replace('\\', '').replace('_', ' ')
    x = re.sub('\[[^]]*\]', '', x)
    x = ps.cont_exp(x)
    x = ps.remove_emails(x)
    x = ps.remove_urls(x) 
    x = ps.remove_html_tags(x)
    x = ps.remove_accented_chars(x)
    x = ps.remove_special_chars(x)
    x = re.sub("(.)\\1{2,}", "\\1", x)
    return x   

train_reviews['text']=train_reviews['text'].apply(get_clean)
test_reviews['text']=test_reviews['text'].apply(get_clean)
train_reviews.head()

train_reviews_lem=train_reviews.copy()
train_reviews_stem=train_reviews.copy()
test_reviews_lem=test_reviews.copy()
test_reviews_stem=test_reviews.copy()

import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
import matplotlib.pyplot as plt

#Stemming

def simple_stemmer(text):
    ps=nltk.porter.PorterStemmer()
    text= ' '.join([ps.stem(word) for word in text.split()])
    return text
train_reviews_stem['text']=train_reviews_stem['text'].apply(simple_stemmer)
test_reviews_stem['text']=test_reviews_stem['text'].apply(simple_stemmer)

from nltk.stem.wordnet import WordNetLemmatizer
import nltk
nltk.download('wordnet')
nltk.download('punkt')

#Lemmatization
def normalization(tweet_list):
        lemmatizer= WordNetLemmatizer()
        word_list = nltk.word_tokenize(tweet_list)
        lemmatized_output = ' '.join([lemmatizer.lemmatize(w) for w in word_list])
        return lemmatized_output
train_reviews_lem['text']=train_reviews_lem['text'].apply(normalization)
test_reviews_lem['text']=test_reviews_lem['text'].apply(normalization)

print(train_reviews.head())
print(train_reviews_stem.head())
print(train_reviews_lem.head())


from nltk.tokenize.toktok import ToktokTokenizer
tokenizer=ToktokTokenizer()
stopword_list=nltk.corpus.stopwords.words('english')

stop=set(stopwords.words('english'))
print(stop)

#removing the stopwords
def remove_stopwords(text, is_lower_case=False):
    tokens = tokenizer.tokenize(text)
    tokens = [token.strip() for token in tokens]
    if is_lower_case:
        filtered_tokens = [token for token in tokens if token not in stopword_list]
    else:
        filtered_tokens = [token for token in tokens if token.lower() not in stopword_list]
    filtered_text = ' '.join(filtered_tokens)    
    return filtered_text

train_reviews_stem['text']=train_reviews_stem['text'].apply(remove_stopwords)
test_reviews_stem['text']=test_reviews_stem['text'].apply(remove_stopwords)
train_reviews['text']=train_reviews['text'].apply(remove_stopwords)
test_reviews['text']=test_reviews['text'].apply(remove_stopwords)
train_reviews_lem['text']=train_reviews_lem['text'].apply(remove_stopwords)
test_reviews_lem['text']=test_reviews_lem['text'].apply(remove_stopwords)

from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
#Count vectorizer for bag of words
cv=CountVectorizer(min_df=0,max_df=1,binary=False,ngram_range=(1,3))
cv_train_reviews_stem=cv.fit_transform(train_reviews_stem['text'])
cv_test_reviews_stem=cv.transform(test_reviews_stem['text'])
cv_train_reviews=cv.fit_transform(train_reviews['text'])
cv_test_reviews=cv.transform(test_reviews['text'])
cv_train_reviews_lem=cv.fit_transform(train_reviews_lem['text'])
cv_test_reviews_lem=cv.transform(test_reviews_lem['text'])

print('BOW_cv_train_stem:',cv_train_reviews_stem.shape)
print('BOW_cv_test_stem:',cv_test_reviews_stem.shape)
print('BOW_cv_train:',cv_train_reviews.shape)
print('BOW_cv_test:',cv_test_reviews.shape)
print('BOW_cv_train_lem:',cv_train_reviews_lem.shape)
print('BOW_cv_test_lem:',cv_test_reviews_lem.shape)

#Tfidf vectorizer
tv=TfidfVectorizer(min_df=0,max_df=1,use_idf=True,ngram_range=(1,3))
tv_train_reviews_stem=tv.fit_transform(train_reviews_stem['text'])
tv_test_reviews_stem=tv.transform(test_reviews_stem['text'])
tv_train_reviews=tv.fit_transform(train_reviews['text'])
tv_test_reviews=tv.transform(test_reviews['text'])
tv_train_reviews_lem=tv.fit_transform(train_reviews_lem['text'])
tv_test_reviews_lem=tv.transform(test_reviews_lem['text'])

print('Tfidf_train:',tv_train_reviews.shape)
print('Tfidf_test:',tv_test_reviews.shape)
print('Tfidf_train_stem:',tv_train_reviews_stem.shape)
print('Tfidf_test_stem:',tv_test_reviews_stem.shape)
print('Tfidf_train_lem:',tv_train_reviews_lem.shape)
print('Tfidf_test_lem:',tv_test_reviews_lem.shape)

from sklearn.metrics import confusion_matrix, classification_report,accuracy_score
from sklearn.linear_model import LogisticRegression,SGDClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import SVC
from sklearn.svm import SVC
svmc=SVC(kernel='poly')
from sklearn.naive_bayes import GaussianNB
nbc=GaussianNB()
from sklearn.tree import DecisionTreeClassifier
dtc=DecisionTreeClassifier()
from sklearn.ensemble import RandomForestClassifier
clf=RandomForestClassifier(n_estimators=100)

#training the models
lr=LogisticRegression(penalty='l2',max_iter=500,C=1,random_state=42)
lr_bow=lr.fit(cv_train_reviews,train_sentiments)
lr_tfidf=lr.fit(tv_train_reviews,train_sentiments)
lr_bow_predict=lr.predict(cv_test_reviews)
lr_tfidf_predict=lr.predict(tv_test_reviews)
lr_bow_score=accuracy_score(test_sentiments,lr_bow_predict)
print("lr_bow_score :",lr_bow_score)
lr_tfidf_score=accuracy_score(test_sentiments,lr_tfidf_predict)
print("lr_tfidf_score :",lr_tfidf_score)
lr_bow_report=classification_report(test_sentiments,lr_bow_predict,target_names=['Positive','Negative'])
print(lr_bow_report)
lr_tfidf_report=classification_report(test_sentiments,lr_tfidf_predict,target_names=['Positive','Negative'])
print(lr_tfidf_report)


svmc_bow=svmc.fit(cv_train_reviews,train_sentiments)
svmc_tfidf=svmc.fit(tv_train_reviews,train_sentiments)
svmc_bow_predict=svmc.predict(cv_test_reviews)
svmc_tfidf_predict=svmc.predict(tv_test_reviews)
svmc_bow_score=accuracy_score(test_sentiments,svmc_bow_predict)
print("svmc_bow_score :",svmc_bow_score)
svmc_tfidf_score=accuracy_score(test_sentiments,svmc_tfidf_predict)
print("svmc_tfidf_score :",svmc_tfidf_score)
svmc_bow_report=classification_report(test_sentiments,svmc_bow_predict,target_names=['Positive','Negative'])
print(svmc_bow_report)
svmc_tfidf_report=classification_report(test_sentiments,svmc_tfidf_predict,target_names=['Positive','Negative'])
print(svmc_tfidf_report)


dtc_bow=dtc.fit(cv_train_reviews,train_sentiments)
dtc_tfidf=dtc.fit(tv_train_reviews,train_sentiments)
dtc_bow_predict=dtc.predict(cv_test_reviews)
dtc_tfidf_predict=dtc.predict(tv_test_reviews)
dtc_bow_score=accuracy_score(test_sentiments,dtc_bow_predict)
print("dtc_bow_score :",dtc_bow_score)
dtc_tfidf_score=accuracy_score(test_sentiments,dtc_tfidf_predict)
print("dtc_tfidf_score :",dtc_tfidf_score)
dtc_bow_report=classification_report(test_sentiments,dtc_bow_predict,target_names=['Positive','Negative'])
print(dtc_bow_report)
dtc_tfidf_report=classification_report(test_sentiments,dtc_tfidf_predict,target_names=['Positive','Negative'])
print(dtc_tfidf_report)


clf_bow=clf.fit(cv_train_reviews,train_sentiments)
clf_tfidf=clf.fit(tv_train_reviews,train_sentiments)
clf_bow_predict=clf.predict(cv_test_reviews)
clf_tfidf_predict=clf.predict(tv_test_reviews)
clf_bow_score=accuracy_score(test_sentiments,clf_bow_predict)
print("clf_bow_score :",clf_bow_score)
clf_tfidf_score=accuracy_score(test_sentiments,clf_tfidf_predict)
print("clf_tfidf_score :",clf_tfidf_score)
clf_bow_report=classification_report(test_sentiments,clf_bow_predict,target_names=['Positive','Negative'])
print(clf_bow_report)
clf_tfidf_report=classification_report(test_sentiments,clf_tfidf_predict,target_names=['Positive','Negative'])
print(clf_tfidf_report)


lr_bow=lr.fit(cv_train_reviews_lem,train_sentiments)
lr_tfidf=lr.fit(tv_train_reviews_lem,train_sentiments)
lr_bow_predict=lr.predict(cv_test_reviews_lem)
lr_tfidf_predict=lr.predict(tv_test_reviews_lem)
lr_bow_score=accuracy_score(test_sentiments,lr_bow_predict)
print("lr_bow_score :",lr_bow_score)
lr_tfidf_score=accuracy_score(test_sentiments,lr_tfidf_predict)
print("lr_tfidf_score :",lr_tfidf_score) 
lr_bow_report=classification_report(test_sentiments,lr_bow_predict,target_names=['Positive','Negative'])
print(lr_bow_report)
lr_tfidf_report=classification_report(test_sentiments,lr_tfidf_predict,target_names=['Positive','Negative'])
print(lr_tfidf_report)


svmc_bow=svmc.fit(cv_train_reviews_lem,train_sentiments)
svmc_tfidf=svmc.fit(tv_train_reviews_lem,train_sentiments)
svmc_bow_predict=svmc.predict(cv_test_reviews_lem)
svmc_tfidf_predict=svmc.predict(tv_test_reviews_lem)
svmc_bow_score=accuracy_score(test_sentiments,svmc_bow_predict)
print("svmc_bow_score :",svmc_bow_score)
svmc_tfidf_score=accuracy_score(test_sentiments,svmc_tfidf_predict)
print("svmc_tfidf_score :",svmc_tfidf_score)
svmc_bow_report=classification_report(test_sentiments,svmc_bow_predict,target_names=['Positive','Negative'])
print(svmc_bow_report)
svmc_tfidf_report=classification_report(test_sentiments,svmc_tfidf_predict,target_names=['Positive','Negative'])
print(svmc_tfidf_report)


dtc_bow=dtc.fit(cv_train_reviews_lem,train_sentiments)
dtc_tfidf=dtc.fit(tv_train_reviews_lem,train_sentiments)
dtc_bow_predict=dtc.predict(cv_test_reviews_lem)
dtc_tfidf_predict=dtc.predict(tv_test_reviews_lem)
dtc_bow_score=accuracy_score(test_sentiments,dtc_bow_predict)
print("dtc_bow_score :",dtc_bow_score)
dtc_tfidf_score=accuracy_score(test_sentiments,dtc_tfidf_predict)
print("dtc_tfidf_score :",dtc_tfidf_score)
dtc_bow_report=classification_report(test_sentiments,dtc_bow_predict,target_names=['Positive','Negative'])
print(dtc_bow_report)
dtc_tfidf_report=classification_report(test_sentiments,dtc_tfidf_predict,target_names=['Positive','Negative'])
print(dtc_tfidf_report)


clf_bow=clf.fit(cv_train_reviews_lem,train_sentiments)
clf_tfidf=clf.fit(tv_train_reviews_lem,train_sentiments)
clf_bow_predict=clf.predict(cv_test_reviews_lem)
clf_tfidf_predict=clf.predict(tv_test_reviews_lem)
clf_bow_score=accuracy_score(test_sentiments,clf_bow_predict)
print("clf_bow_score :",clf_bow_score)
clf_tfidf_score=accuracy_score(test_sentiments,clf_tfidf_predict)
print("clf_tfidf_score :",clf_tfidf_score)
clf_bow_report=classification_report(test_sentiments,clf_bow_predict,target_names=['Positive','Negative'])
print(clf_bow_report)
clf_tfidf_report=classification_report(test_sentiments,clf_tfidf_predict,target_names=['Positive','Negative'])
print(clf_tfidf_report)


lr_bow=lr.fit(cv_train_reviews_stem,train_sentiments)
lr_tfidf=lr.fit(tv_train_reviews_stem,train_sentiments)
lr_bow_predict=lr.predict(cv_test_reviews_stem)
lr_tfidf_predict=lr.predict(tv_test_reviews_stem)
lr_bow_score=accuracy_score(test_sentiments,lr_bow_predict)
print("lr_bow_score :",lr_bow_score)
lr_tfidf_score=accuracy_score(test_sentiments,lr_tfidf_predict)
print("lr_tfidf_score :",lr_tfidf_score)
lr_bow_report=classification_report(test_sentiments,lr_bow_predict,target_names=['Positive','Negative'])
print(lr_bow_report)
lr_tfidf_report=classification_report(test_sentiments,lr_tfidf_predict,target_names=['Positive','Negative'])
print(lr_tfidf_report)


svmc_bow=svmc.fit(cv_train_reviews_stem,train_sentiments)
svmc_tfidf=svmc.fit(tv_train_reviews_stem,train_sentiments)
svmc_bow_predict=svmc.predict(cv_test_reviews_stem)
svmc_tfidf_predict=svmc.predict(tv_test_reviews_stem)
svmc_bow_score=accuracy_score(test_sentiments,svmc_bow_predict)
print("svmc_bow_score :",svmc_bow_score)
svmc_tfidf_score=accuracy_score(test_sentiments,svmc_tfidf_predict)
print("svmc_tfidf_score :",svmc_tfidf_score)
svmc_bow_report=classification_report(test_sentiments,svmc_bow_predict,target_names=['Positive','Negative'])
print(svmc_bow_report)
svmc_tfidf_report=classification_report(test_sentiments,svmc_tfidf_predict,target_names=['Positive','Negative'])
print(svmc_tfidf_report)


dtc_bow=dtc.fit(cv_train_reviews_stem,train_sentiments)
dtc_tfidf=dtc.fit(tv_train_reviews_stem,train_sentiments)
dtc_bow_predict=dtc.predict(cv_test_reviews_stem)
dtc_tfidf_predict=dtc.predict(tv_test_reviews_stem)
dtc_bow_score=accuracy_score(test_sentiments,dtc_bow_predict)
print("dtc_bow_score :",dtc_bow_score)
dtc_tfidf_score=accuracy_score(test_sentiments,dtc_tfidf_predict)
print("dtc_tfidf_score :",dtc_tfidf_score)
dtc_bow_report=classification_report(test_sentiments,dtc_bow_predict,target_names=['Positive','Negative'])
print(dtc_bow_report)
dtc_tfidf_report=classification_report(test_sentiments,dtc_tfidf_predict,target_names=['Positive','Negative'])
print(dtc_tfidf_report)


clf_bow=clf.fit(cv_train_reviews_stem,train_sentiments)
clf_tfidf=clf.fit(tv_train_reviews_stem,train_sentiments)
clf_bow_predict=clf.predict(cv_test_reviews_stem)
clf_tfidf_predict=clf.predict(tv_test_reviews_stem)
clf_bow_score=accuracy_score(test_sentiments,clf_bow_predict)
print("clf_bow_score :",clf_bow_score)
clf_tfidf_score=accuracy_score(test_sentiments,clf_tfidf_predict)
print("clf_tfidf_score :",clf_tfidf_score)
clf_bow_report=classification_report(test_sentiments,clf_bow_predict,target_names=['Positive','Negative'])
print(clf_bow_report)
clf_tfidf_report=classification_report(test_sentiments,clf_tfidf_predict,target_names=['Positive','Negative'])
print(clf_tfidf_report)